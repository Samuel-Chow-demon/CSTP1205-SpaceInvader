#pragma once

#include <string>
#include <vector>
#include <map>

enum eSPRITE_CHAR_SIZE 
{
	eCHAR_SMALL = 0,
	eCHAR_LARGE,
	eTOTAL_CHAR_SIZE
};

inline std::map<char, std::vector<std::string> > GetCharSprite(void)
{
	return { {'A', {" * ",
				    "* *",
				    "***",
				    "* *",
				    "* *"} },

			 {'B', {"** ",
					"* *",
					"***",
					"* *",
					"**"} },

			 {'C', {" **",
					"*  ",
					"*  ",
					"*  ",
					" **"} },

			 {'D', {"** ",
					"* *",
					"* *",
					"* *",
					"** "} },
			
			 {'E', {"***",
					"*  ",
					"***",
					"*  ",
					"***"} },

			 {'F', {"***",
					"*  ",
					"***",
					"*  ",
					"*  "} },

			 {'G', {" **",
					"*  ",
					"* *",
					"* *",
					"***"} },

			 {'H', {"* *",
					"* *",
					"***",
					"* *",
					"* *"} },
			
			 {'I', {"***",
					" * ",
					" * ",
					" * ",
					"***"} },

			 {'J', {"***",
					"  *",
					"  *",
					"  *",
					"**"} },

			 {'K', {"* *",
					"* *",
					"** ",
					"* *",
					"* *"} },

			 {'L', {"*  ",
					"*  ",
					"*  ",
					"*  ",
					"***"} },

			 {'M', {"*   *",
					"** **",
					"* * *",
					"*   *",
					"*   *"} },
			
			 {'N', {"*   *",
					"**  *",
					"* * *",
					"*  **",
					"*   *"} },

			 {'O', {" ** ",
					"*  *",
					"*  *",
					"*  *",
					" **"} },

			 {'P', {"*** ",
					"*  *",
					"*** ",
					"*   ",
					"*   "} },

			 {'Q', {" ** ",
					"*  *",
					"** *",
					"* * ",
					" * *"} },

			 {'R', {"*** ",
					"*  *",
					"*** ",
					"* * ",
					"*  *"} },

			 {'S', {" ***",
					"*   ",
					"*** ",
					"   *",
					"*** "} },

			 {'T', {"****",
					"  * ",
					"  * ",
					"  * ",
					"  * "} },

			 {'U', {"*  *",
					"*  *",
					"*  *",
					"*  *",
					" ** "} },

			 {'V', {"*  *",
					"*  *",
					"*  *",
					" ** ",
					"  * "} },

			 {'W', {"*   *",
					"* * *",
					"* * *",
					"*****",
					"* * *"} },

			 {'X', {"* *",
					"* *",
					" * ",
					"* *",
					"* *" } },

			 {'Y', {"* *",
					"* *",
					" * ",
					" * ",
					" * " } },

			 {'Z', {"***",
					"  *",
					" * ",
					"*  ",
					"***" } },

			 {'0', {" * ",
				    "* *",
				    "* *",
				    "* *",
				    " * "} },

			 {'1', {" **",
					"* *",
					"  *",
					"  *",
					"  *"} },

			 {'2', {"** ",
					"  *",
					"***",
					"*  ",
					"***"} },

			 {'3', {"***",
					"  *",
					"***",
					"  *",
					"***"} },

			 {'4', {"* *",
					"* *",
					"***",
					"  *",
					"  *"} },

			 {'5', {"***",
					"*  ",
					"** ",
					"  *",
					"***"} },

			 {'6', {" **",
					"*  ",
					"***",
					"* *",
					"***"} },

			 {'7', {"***",
					"  *",
					" * ",
					"*  ",
					"*  "} },

			 {'8', {"***",
					"* *",
					" * ",
					"* *",
					"***"} },

			 {'9', {"***",
					"* *",
					" **",
					"  *",
					"** "} },

			 {'/', {"    *",
				    "   * ",
				    "  *  ",
				    " *   ",
				    "*    "} },

			 {'"', {" * *  ",
				    " * *  ",
				    "      ",
				    "      ",
				    "      "} },

			 {'^', {"  *  ",
					" *** ",
					"* * *",
					"  *  ",
					"  *  "} },

			 // using "!" for down arrow, not to use wchar
			 {'!', {"  *  ",
					"  *  ",
					"* * *",
					" *** ",
					"  *  "} },

			 {'>', {"  *  ",
					"   * ",
					"*****",
					"   * ",
					"  *  "} },

			 {'<', {"  *  ",
					" *   ",
					"*****",
					" *   ",
					"  *  "} },

			 { '-', {"     ",
					 "     ",
					 "*****",
					 "     ",
					 "     "} }
	};
};

inline std::map<char, std::vector<std::string> > GetLargeCharSprite(void)
{
	return { {'A', {" **** ",
					"******",
					"**  **",
					"**  **",
					"******",
					"******",
					"**  **",
					"**  **",
					"**  **",
					"**  **"} },

			 {'B', {"**** ",
					"******",
					"**  **",
					"**  **",
					"*****",
					"***** ",
					"**  **",
					"**  **",
					"******",
					"*****"} },

			 {'C', {" *****",
					"******",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"******",
					" *****"} },

			 {'D', {"**** ",
					"******",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"******",
					"****  "} },

			 {'E', {"******",
					"******",
					"**    ",
					"**    ",
					"******",
					"******",
					"**    ",
					"**    ",
					"******",
					"******"} },

			 {'F', {"******",
					"******",
					"**    ",
					"**    ",
					"******",
					"******",
					"**    ",
					"**    ",
					"**    ",
					"**    "} },

			 {'G', {" **** ",
					"******",
					"**    ",
					"**    ",
					"** ***",
					"** ***",
					"**  **",
					"**  **",
					"******",
					"*****"} },

			 {'H', {"**  **",
					"**  **",
					"**  **",
					"**  **",
					"******",
					"******",
					"**  **",
					"**  **",
					"**  **",
					"**  **"} },

			 {'I', {"******",
					"******",
					"  **  ",
					"  **  ",
					"  **  ",
					"  **  ",
					"  **  ",
					"  **  ",
					"******",
					"******"} },

			 {'J', {"  ****",
					"  ****",
					"    **",
					"    **",
					"    **",
					"    **",
					"    **",
					"    **",
					"******",
					"*****"} },

			 {'K', {"**  **",
					"**  **",
					"**  **",
					"**  **",
					"***** ",
					"***** ",
					"**  **",
					"**  **",
					"**  **",
					"**  **"} },

			 {'L', {"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"**    ",
					"******",
					"******"} },

			 {'M', {"**      **",
					"***    ***",
					"****  ****",
					"****  ****",
					"**********",
					"**********",
					"**  **  **",
					"**  **  **",
					"**  **  **",
					"**  **  **"} },

			 {'N', {"**    **",
					"**    **",
					"***   **",
					"****  **",
					"** ** **",
					"**  * **",
					"**  ****",
					"**   ***",
					"**    **",
					"**    **"} },

			 {'O', {" ****** ",
					"********",
					"**    **",
					"**    **",
					"**    **",
					"**    **",
					"**    **",
					"**    **",
					"********",
					" ****** "} },

			 {'P', {"****** ",
					"*******",
					"**   **",
					"**   **",
					"*******",
					"****** ",
					"**     ",
					"**     ",
					"**     ",
					"**     "} },

			 {'Q', {"  ****  ",
					"********",
					"**    **",
					"**    **",
					"**    **",
					"**    **",
					"** ** **",
					"**  ** *",
					"******* ",
					" **** **"} },

			 {'R', {"****** ",
					"****** ",
					"**   **",
					"**   **",
					"****** ",
					"*****  ",
					"** **  ",
					"**  ** ",
					"**  ** ",
					"**   **"} },

			 {'S', {"  ******",
					"********",
					"**      ",
					"**      ",
					"*****   ",
					" ****** ",
					"     ***",
					"      **",
					"********",
					"******* "} },

			 {'T', {"********",
					"********",
					"    **  ",
					"    **  ",
					"    **  ",
					"    **  ",
					"    **  ",
					"    **  ",
					"    **  ",
					"    **  "} },

			 {'U', {"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"**  **",
					"******",
					" **** "} },

			 {'V', {"**   **",
					"**   **",
					"**   **",
					"**   **",
					"**   **",
					"**   **",
					"**   **",
					" ** ** ",
					"  ***  ",
					"   *   "} },

			 {'W', {"**     *",
					"**  * **",
					"** ** **",
					"** ** **",
					"** ** **",
					"** ** **",
					"********",
					"********",
					"** ** **",
					"*   *  *"} },

			 {'X', {"**  **",
					"**  **",
					"**  **",
					" **** ",
					"  **  ",
					" ****",
					"**  **",
					"**  **",
					"**  **",
					"**  **" } },

			 {'Y', {"**   **",
					"**   **",
					"**   **",
					"**   **",
					"***  **",
					" ***** ",
					"  ***  ",
					"   **  ",
					"   **  ",
					"   **  "} },

			 {'Z', {"******",
					"******",
					"    **",
					"    **",
					"   ** ",
					"  **  ",
					" **   ",
					"**    ",
					"******",
					"******"} },

			 {'"', {"* *  ",
					"* *  ",
					"* *  ",
					" * * ",
					"  * *"} }
	};
};
